/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wooapp;

import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.concurrent.ExecutorService;
import wooapp.menu.MenuGroup;
import wooapp.myapp.dao.BoardDao;
import wooapp.myapp.dao.JJ_MemberDao;
import wooapp.myapp.dao.mysql.AssignmentDaoImpl;
import wooapp.myapp.dao.mysql.BoardDaoImpl;
import wooapp.myapp.dao.mysql.JJMemberDaoImpl;
import wooapp.myapp.handler.HelpHandler;
import wooapp.myapp.handler.board.BoardAddHandler;
import wooapp.myapp.handler.board.BoardDeleteHandler;
import wooapp.myapp.handler.board.BoardListHandler;
import wooapp.myapp.handler.board.BoardModifyHandler;
import wooapp.myapp.handler.board.BoardViewHandler;
import wooapp.util.Prompt;
import java.io.DataInputStream;
import java.util.concurrent.Executors;


public class ServerApp {


    ExecutorService executorService = Executors.newCachedThreadPool();

    BoardDao boardDao;
    BoardDao greetingDao;
    wooapp.myapp.dao.AssignmentDao assignmentDao;
    JJ_MemberDao JJMemberDao;

    MenuGroup mainMenu;

    ServerApp() {
        prepareDatabase();
        prepareMenu();
    }

    public static void main(String[] args) {
        System.out.println("[주짓수 관리 시스템]");
        new ServerApp().run();
    }

    void prepareDatabase() {
        try {
            Connection con = DriverManager.getConnection(
                "jdbc:mysql://db-ld28n-kr.vpc-pub-cdb.ntruss.com/studydb", "study",
                "Bitcamp!@#123");

            boardDao = new BoardDaoImpl(con, 1);
            greetingDao = new BoardDaoImpl(con, 2);
            assignmentDao = new AssignmentDaoImpl(con);
            JJMemberDao = new JJMemberDaoImpl(con);

        } catch (Exception e) {
            System.out.println("통신 오류!");
            e.printStackTrace();
        }
    }

    void prepareMenu() {
        mainMenu = MenuGroup.getInstance("메인");

        MenuGroup assignmentMenu = mainMenu.addGroup("과제");
        assignmentMenu.addItem("등록", new wooapp.myapp.handler.assignment.AssignmentAddHandler(assignmentDao));
        assignmentMenu.addItem("조회", new wooapp.myapp.handler.assignment.AssignmentViewHandler(assignmentDao));
        assignmentMenu.addItem("변경", new wooapp.myapp.handler.assignment.AssignmentModifyHandler(assignmentDao));
        assignmentMenu.addItem("삭제", new wooapp.myapp.handler.assignment.AssignmentDeleteHandler(assignmentDao));
        assignmentMenu.addItem("목록", new wooapp.myapp.handler.assignment.AssignmentListHandler(assignmentDao));

        MenuGroup boardMenu = mainMenu.addGroup("게시글");
        boardMenu.addItem("등록", new BoardAddHandler(boardDao));
        boardMenu.addItem("조회", new BoardViewHandler(boardDao));
        boardMenu.addItem("변경", new BoardModifyHandler(boardDao));
        boardMenu.addItem("삭제", new BoardDeleteHandler(boardDao));
        boardMenu.addItem("목록", new BoardListHandler(boardDao));

        MenuGroup memberMenu = mainMenu.addGroup("JJ회원");
        memberMenu.addItem("등록", new wooapp.myapp.handler.member.JJ_MemberAddHandler(JJMemberDao));
        memberMenu.addItem("조회", new wooapp.myapp.handler.member.JJ_MemberViewHandler(JJMemberDao));
        memberMenu.addItem("변경", new wooapp.myapp.handler.member.JJ_MemberModifyHandler(JJMemberDao));
        memberMenu.addItem("삭제", new wooapp.myapp.handler.member.JJ_MemberDeleteHandler(JJMemberDao));
        memberMenu.addItem("목록", new wooapp.myapp.handler.member.JJ_MemberListHandler(JJMemberDao));

        MenuGroup greetingMenu = mainMenu.addGroup("가입인사");
        greetingMenu.addItem("등록", new BoardAddHandler(greetingDao));
        greetingMenu.addItem("조회", new BoardViewHandler(greetingDao));
        greetingMenu.addItem("변경", new BoardModifyHandler(greetingDao));
        greetingMenu.addItem("삭제", new BoardDeleteHandler(greetingDao));
        greetingMenu.addItem("목록", new BoardListHandler(greetingDao));

        mainMenu.addItem("도움말", new HelpHandler());

    }

    void run() {
        try (ServerSocket serverSocket = new ServerSocket(8888)) {

            while (true) {
                Socket socket = serverSocket.accept();
                executorService.execute(() -> processRequest(socket));
            }

        } catch (Exception e) {
            System.out.println("서버 소켓 생성 오류!");
            e.printStackTrace();
        }
    }

    void processRequest(Socket socket) {
        try (Socket s = socket;
            DataOutputStream out = new DataOutputStream(s.getOutputStream());
            DataInputStream in = new DataInputStream(s.getInputStream());
            Prompt prompt = new Prompt(in, out)) {

            while (true) {
                try {
                    mainMenu.execute(prompt);
                    prompt.print("[[quit!]]");
                    prompt.end();
                    break;
                } catch (Exception e) {
                    System.out.println("예외 발생!");
                    e.printStackTrace();
                }
            }

        } catch (Exception e) {
            System.out.println("클라이언 통신 오류!");
            e.printStackTrace();
        }
    }

}
